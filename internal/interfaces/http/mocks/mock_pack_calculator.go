// Code generated by MockGen. DO NOT EDIT.
// Source: calculate_product_packs/internal/interfaces/http (interfaces: PackCalculator)

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "calculate_product_packs/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPackCalculator is a mock of PackCalculator interface.
type MockPackCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockPackCalculatorMockRecorder
}

// MockPackCalculatorMockRecorder is the mock recorder for MockPackCalculator.
type MockPackCalculatorMockRecorder struct {
	mock *MockPackCalculator
}

// NewMockPackCalculator creates a new mock instance.
func NewMockPackCalculator(ctrl *gomock.Controller) *MockPackCalculator {
	mock := &MockPackCalculator{ctrl: ctrl}
	mock.recorder = &MockPackCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackCalculator) EXPECT() *MockPackCalculatorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockPackCalculator) Execute(arg0 int) ([]domain.PackResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].([]domain.PackResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockPackCalculatorMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPackCalculator)(nil).Execute), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: calculate_product_packs/internal/interfaces/http (interfaces: PackSizer)

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "calculate_product_packs/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPackSizer is a mock of PackSizer interface.
type MockPackSizer struct {
	ctrl     *gomock.Controller
	recorder *MockPackSizerMockRecorder
}

// MockPackSizerMockRecorder is the mock recorder for MockPackSizer.
type MockPackSizerMockRecorder struct {
	mock *MockPackSizer
}

// NewMockPackSizer creates a new mock instance.
func NewMockPackSizer(ctrl *gomock.Controller) *MockPackSizer {
	mock := &MockPackSizer{ctrl: ctrl}
	mock.recorder = &MockPackSizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackSizer) EXPECT() *MockPackSizerMockRecorder {
	return m.recorder
}

// GetPackSizes mocks base method.
func (m *MockPackSizer) GetPackSizes() []domain.PackSize {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackSizes")
	ret0, _ := ret[0].([]domain.PackSize)
	return ret0
}

// GetPackSizes indicates an expected call of GetPackSizes.
func (mr *MockPackSizerMockRecorder) GetPackSizes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackSizes", reflect.TypeOf((*MockPackSizer)(nil).GetPackSizes))
}

// UpdatePackSizes mocks base method.
func (m *MockPackSizer) UpdatePackSizes(arg0 []domain.PackSize) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePackSizes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePackSizes indicates an expected call of UpdatePackSizes.
func (mr *MockPackSizerMockRecorder) UpdatePackSizes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackSizes", reflect.TypeOf((*MockPackSizer)(nil).UpdatePackSizes), arg0)
}
